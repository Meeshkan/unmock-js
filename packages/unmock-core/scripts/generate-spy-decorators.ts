const prettier = require("prettier"); // tslint:disable-line:no-var-requires

const interfaceMethodsFor = (method: string): string => {
  return `${method}Host(matcher?: SinonMatcher): string;
${method}RequestBody(matcher?: SinonMatcher): any;`;
};

const header = `/* This file has been autogenerated from unmock-core/scripts.
* Regenerate with "npm run generate-spy", DO NOT EDIT THIS FILE!
*/`;

const imports = `import { match, SinonMatcher } from "sinon";
import { UnmockServiceSpy } from "..";
import { HTTPMethod } from "../../../interfaces";
import { decorateSpy, verifyOnlyOneCall } from "../decorate";`;

const decoratorInterface = `export interface ISpyDecoration {
    with(matcher: SinonMatcher): UnmockServiceSpy;
    withMethod(method: HTTPMethod): UnmockServiceSpy;
    ${interfaceMethodsFor("post")}
    ${interfaceMethodsFor("get")}
    ${interfaceMethodsFor("put")}
    ${interfaceMethodsFor("delete")}
}
`;

const decoratorsFor = (method: string): string => {
  return `${method}Host(this: UnmockServiceSpy, matcher?: SinonMatcher): string {
    const methodMatcher = match({ method: "${method}" });
    const fullMatcher = matcher ? methodMatcher.and(matcher) : methodMatcher;
    const spyWithMatcher = this.with(fullMatcher);
    verifyOnlyOneCall({ spy: spyWithMatcher, errPrefix: "${method}Host" });
    return spyWithMatcher.firstCall.args[0].host;
  },
  ${method}RequestBody(this: UnmockServiceSpy, matcher?: SinonMatcher): any {
    const methodMatcher = match({ method: "${method}" });
    const fullMatcher = matcher ? methodMatcher.and(matcher) : methodMatcher;
    const spyWithMatcher = this.with(fullMatcher);
    verifyOnlyOneCall({ spy: spyWithMatcher, errPrefix: "${method}RequestBody" });
    return spyWithMatcher.firstCall.args[0].body;
  }`;
};

const decorators = `export const decorators = {
    with(this: UnmockServiceSpy, matcher: SinonMatcher): UnmockServiceSpy {
        return decorateSpy(this.withArgs(matcher));
    },
    withMethod(this: UnmockServiceSpy, method: HTTPMethod): UnmockServiceSpy {
        return this.with(match({ method }));
    },
    ${decoratorsFor("post")},
    ${decoratorsFor("get")},
    ${decoratorsFor("put")},
    ${decoratorsFor("delete")},
}
`;

const sourceText = `${header}
${imports}

${decoratorInterface}

${decorators}
`;

console.log(prettier.format(sourceText, { parser: "typescript" })); // tslint:disable-line:no-console
