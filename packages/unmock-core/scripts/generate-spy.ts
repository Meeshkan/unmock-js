const prettier = require("prettier"); // tslint:disable-line:no-var-requires
const path = require("path"); // tslint:disable-line:no-var-requires

type HTTPMethod =
  | "get"
  | "head"
  | "post"
  | "put"
  | "patch"
  | "delete"
  | "options"
  | "trace";

const header = `/* This file has been autogenerated from ${path.basename(
  __filename,
)}.
* Regenerate with "npm run generate-spy", DO NOT EDIT THIS FILE!
*/`;

const imports = `import { match, SinonMatcher } from "sinon";
import { ServiceSpy } from "..";
import { HTTPMethod, IIncomingHeaders, IIncomingQuery, IOutgoingHeaders, IProtocol } from "../../../interfaces";
import { decorateSpy, verifyOnlyOneCall } from "../decorate";
import { JSONValue } from "json-schema-strictly-typed";`;

/**
 * Create source describing the interfaces for all methods starting with HTTP method,
 * such as `getResponseBody`, `postRequestBody`, etc.
 * @param method HTTP method
 */
const interfaceMethodsFor = (method: HTTPMethod): string => {
  return `${method}RequestHost(matcher?: SinonMatcher): string;
${method}RequestBody(matcher?: SinonMatcher): string | undefined;
${method}RequestBodyAsJson(matcher?: SinonMatcher): JSONValue | undefined;
${method}RequestPathname(matcher?: SinonMatcher): string;
${method}RequestPath(matcher?: SinonMatcher): string;
${method}RequestHeaders(matcher?: SinonMatcher): IIncomingHeaders | undefined;
${method}RequestQuery(matcher?: SinonMatcher): IIncomingQuery;
${method}RequestProtocol(matcher?: SinonMatcher): IProtocol;

${method}ResponseBody(matcher?: SinonMatcher): string | undefined;
${method}ResponseBodyAsJson(matcher?: SinonMatcher): JSONValue | undefined;
${method}ResponseCode(matcher?: SinonMatcher): number;
${method}ResponseHeaders(matcher?: SinonMatcher): IOutgoingHeaders | undefined;
`;
};

const decoratorInterface = `export interface ISpyDecoration {
    with(matcher: SinonMatcher): ServiceSpy;
    withMethod(method: HTTPMethod): ServiceSpy;
    ${interfaceMethodsFor("post")}
    ${interfaceMethodsFor("get")}
    ${interfaceMethodsFor("put")}
    ${interfaceMethodsFor("delete")}
}
`;

const makeInternalFunction = (a0: string) => (
  method: HTTPMethod,
  tp: string,
  caps: string,
  lower: string,
) => `
${method}${caps}(this: ServiceSpy, matcher?: SinonMatcher): ${tp} {
  const methodMatcher = match({ method: "${method}" });
  const fullMatcher = matcher ? methodMatcher.and(matcher) : methodMatcher;
  const spyWithMatcher = this.with(fullMatcher);
  verifyOnlyOneCall({ spy: spyWithMatcher, errPrefix: "${method}${caps}" });
  return spyWithMatcher.firstCall.${a0}.${lower};
}
`;

const makeInternalRequestFunction = makeInternalFunction("args[0]");
const makeInternalResposneFunction = makeInternalFunction("returnValue");

const decoratorsFor = (method: HTTPMethod): string => {
  return `${makeInternalRequestFunction(
    method,
    "string",
    "RequestHost",
    "host",
  )},
  ${makeInternalRequestFunction(
    method,
    "string | undefined",
    "RequestBody",
    "body",
  )},
  ${makeInternalRequestFunction(
    method,
    "JSONValue | undefined",
    "RequestBodyAsJson",
    "bodyAsJson",
  )},
  ${makeInternalRequestFunction(method, "string", "RequestPath", "path")},
  ${makeInternalRequestFunction(
    method,
    "string",
    "RequestPathname",
    "pathname",
  )},
  ${makeInternalRequestFunction(
    method,
    "IIncomingHeaders | undefined",
    "RequestHeaders",
    "headers",
  )},
  ${makeInternalRequestFunction(
    method,
    "IIncomingQuery",
    "RequestQuery",
    "query",
  )},
  ${makeInternalRequestFunction(
    method,
    "IProtocol",
    "RequestProtocol",
    "protocol",
  )},
  ${makeInternalResposneFunction(
    method,
    "string | undefined",
    "ResponseBody",
    "body",
  )},
  ${makeInternalResposneFunction(
    method,
    "JSONValue | undefined",
    "ResponseBodyAsJson",
    "bodyAsJson",
  )},
  ${makeInternalResposneFunction(
    method,
    "number",
    "ResponseCode",
    "statusCode",
  )},
  ${makeInternalResposneFunction(
    method,
    "IOutgoingHeaders | undefined",
    "ResponseHeaders",
    "headers",
  )}`;
};

const decorators = `export const decorators = {
    with(this: ServiceSpy, matcher: SinonMatcher): ServiceSpy {
        return decorateSpy(this.withArgs(matcher));
    },
    withMethod(this: ServiceSpy, method: HTTPMethod): ServiceSpy {
        return this.with(match({ method }));
    },
    ${decoratorsFor("post")},
    ${decoratorsFor("get")},
    ${decoratorsFor("put")},
    ${decoratorsFor("delete")},
}
`;

const sourceText = `${header}
${imports}

${decoratorInterface}

${decorators}
`;

console.log(prettier.format(sourceText, { parser: "typescript" })); // tslint:disable-line:no-console
