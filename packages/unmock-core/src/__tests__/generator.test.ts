import fs from "fs";
import yaml from "js-yaml";
import { mockGeneratorFactory } from "../generator";
import { ISerializedRequest, RequestToSpec } from "../interfaces";
import { OASSchema } from "../service/interfaces";

const filterUnmock = (schemaObj: OASSchema): OASSchema => {
  if (typeof schemaObj === "object") {
    Object.keys(schemaObj).forEach((key: string) => {
      if (key.startsWith("x-unmock-")) {
        delete schemaObj[key];
      } else {
        filterUnmock(schemaObj[key]);
      }
    });
  }
  return schemaObj;
};

const getSpecFromRequest = (removeUnmock: boolean): RequestToSpec => (
  _: ISerializedRequest,
): any => {
  // uses `x-unmock-size: 4` for `Pets`
  const obj = yaml.load(
    fs.readFileSync(
      __dirname + "/__unmock__/petstore/spec_parsed.yaml",
      "utf8",
    ),
  );
  if (!removeUnmock) {
    return obj;
  }
  // remove `x-unmock-size`
  return filterUnmock(obj);
};

describe("Response generator test suite", () => {
  test("Generates array of specified-size on consecutive calls", () => {
    const req: ISerializedRequest = {
      host: "NA",
      method: "get",
      path: "/pets",
      protocol: "https",
    };
    const generator = mockGeneratorFactory(getSpecFromRequest(false));
    expect(generator(req).response.body.length).toBe(4);
    // We call the generator twice to ensure the size generated is indeed '4'
    // as requested and not "by chance" generated by jsf
    expect(generator(req).response.body.length).toBe(4);
  });
});
