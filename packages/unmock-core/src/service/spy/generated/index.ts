/* This file has been autogenerated from generate-spy.ts.
 * Regenerate with "npm run generate-spy", DO NOT EDIT THIS FILE!
 */
import { match, SinonMatcher } from "sinon";
import { ServiceSpy } from "..";
import {
  HTTPMethod,
  IIncomingHeaders,
  IIncomingQuery,
  IOutgoingHeaders,
  IProtocol,
} from "../../../interfaces";
import { decorateSpy, verifyOnlyOneCall } from "../decorate";

export interface ISpyDecoration {
  with(matcher: SinonMatcher): ServiceSpy;
  withMethod(method: HTTPMethod): ServiceSpy;
  postRequestHost(matcher?: SinonMatcher): string;
  postRequestBody(matcher?: SinonMatcher): any;
  postRequestPathname(matcher?: SinonMatcher): string;
  postRequestPath(matcher?: SinonMatcher): string;
  postRequestHeaders(matcher?: SinonMatcher): IIncomingHeaders;
  postRequestQuery(matcher?: SinonMatcher): IIncomingQuery;
  postRequestProtocol(matcher?: SinonMatcher): IProtocol;

  postResponseBody(matcher?: SinonMatcher): any;
  postResponseCode(matcher?: SinonMatcher): number;
  postResponseHeaders(matcher?: SinonMatcher): IOutgoingHeaders;

  getRequestHost(matcher?: SinonMatcher): string;
  getRequestBody(matcher?: SinonMatcher): any;
  getRequestPathname(matcher?: SinonMatcher): string;
  getRequestPath(matcher?: SinonMatcher): string;
  getRequestHeaders(matcher?: SinonMatcher): IIncomingHeaders;
  getRequestQuery(matcher?: SinonMatcher): IIncomingQuery;
  getRequestProtocol(matcher?: SinonMatcher): IProtocol;

  getResponseBody(matcher?: SinonMatcher): any;
  getResponseCode(matcher?: SinonMatcher): number;
  getResponseHeaders(matcher?: SinonMatcher): IOutgoingHeaders;

  putRequestHost(matcher?: SinonMatcher): string;
  putRequestBody(matcher?: SinonMatcher): any;
  putRequestPathname(matcher?: SinonMatcher): string;
  putRequestPath(matcher?: SinonMatcher): string;
  putRequestHeaders(matcher?: SinonMatcher): IIncomingHeaders;
  putRequestQuery(matcher?: SinonMatcher): IIncomingQuery;
  putRequestProtocol(matcher?: SinonMatcher): IProtocol;

  putResponseBody(matcher?: SinonMatcher): any;
  putResponseCode(matcher?: SinonMatcher): number;
  putResponseHeaders(matcher?: SinonMatcher): IOutgoingHeaders;

  deleteRequestHost(matcher?: SinonMatcher): string;
  deleteRequestBody(matcher?: SinonMatcher): any;
  deleteRequestPathname(matcher?: SinonMatcher): string;
  deleteRequestPath(matcher?: SinonMatcher): string;
  deleteRequestHeaders(matcher?: SinonMatcher): IIncomingHeaders;
  deleteRequestQuery(matcher?: SinonMatcher): IIncomingQuery;
  deleteRequestProtocol(matcher?: SinonMatcher): IProtocol;

  deleteResponseBody(matcher?: SinonMatcher): any;
  deleteResponseCode(matcher?: SinonMatcher): number;
  deleteResponseHeaders(matcher?: SinonMatcher): IOutgoingHeaders;
}

export const decorators = {
  with(this: ServiceSpy, matcher: SinonMatcher): ServiceSpy {
    return decorateSpy(this.withArgs(matcher));
  },
  withMethod(this: ServiceSpy, method: HTTPMethod): ServiceSpy {
    return this.with(match({ method }));
  },
  postRequestHost(this: ServiceSpy, matcher?: SinonMatcher): string {
    const methodMatcher = match({ method: "post" });
    const fullMatcher = matcher ? methodMatcher.and(matcher) : methodMatcher;
    const spyWithMatcher = this.with(fullMatcher);
    verifyOnlyOneCall({ spy: spyWithMatcher, errPrefix: "postHost" });
    return spyWithMatcher.firstCall.args[0].host;
  },
  postRequestBody(this: ServiceSpy, matcher?: SinonMatcher): any {
    const methodMatcher = match({ method: "post" });
    const fullMatcher = matcher ? methodMatcher.and(matcher) : methodMatcher;
    const spyWithMatcher = this.with(fullMatcher);
    verifyOnlyOneCall({ spy: spyWithMatcher, errPrefix: "postRequestBody" });
    return spyWithMatcher.firstCall.args[0].body;
  },
  postRequestPath(this: ServiceSpy, matcher?: SinonMatcher): any {
    const methodMatcher = match({ method: "post" });
    const fullMatcher = matcher ? methodMatcher.and(matcher) : methodMatcher;
    const spyWithMatcher = this.with(fullMatcher);
    verifyOnlyOneCall({ spy: spyWithMatcher, errPrefix: "postRequestPath" });
    return spyWithMatcher.firstCall.args[0].path;
  },
  postRequestPathname(this: ServiceSpy, matcher?: SinonMatcher): any {
    const methodMatcher = match({ method: "post" });
    const fullMatcher = matcher ? methodMatcher.and(matcher) : methodMatcher;
    const spyWithMatcher = this.with(fullMatcher);
    verifyOnlyOneCall({
      spy: spyWithMatcher,
      errPrefix: "postRequestPathname",
    });
    return spyWithMatcher.firstCall.args[0].pathname;
  },
  postRequestHeaders(this: ServiceSpy, matcher?: SinonMatcher): any {
    const methodMatcher = match({ method: "post" });
    const fullMatcher = matcher ? methodMatcher.and(matcher) : methodMatcher;
    const spyWithMatcher = this.with(fullMatcher);
    verifyOnlyOneCall({ spy: spyWithMatcher, errPrefix: "postRequestHeaders" });
    return spyWithMatcher.firstCall.args[0].headers;
  },
  postRequestQuery(this: ServiceSpy, matcher?: SinonMatcher): any {
    const methodMatcher = match({ method: "post" });
    const fullMatcher = matcher ? methodMatcher.and(matcher) : methodMatcher;
    const spyWithMatcher = this.with(fullMatcher);
    verifyOnlyOneCall({ spy: spyWithMatcher, errPrefix: "postRequestQuery" });
    return spyWithMatcher.firstCall.args[0].query;
  },
  postRequestProtocol(this: ServiceSpy, matcher?: SinonMatcher): any {
    const methodMatcher = match({ method: "post" });
    const fullMatcher = matcher ? methodMatcher.and(matcher) : methodMatcher;
    const spyWithMatcher = this.with(fullMatcher);
    verifyOnlyOneCall({
      spy: spyWithMatcher,
      errPrefix: "postRequestProtocol",
    });
    return spyWithMatcher.firstCall.args[0].protocol;
  },
  postResponseBody(this: ServiceSpy, matcher?: SinonMatcher): any {
    const methodMatcher = match({ method: "post" });
    const fullMatcher = matcher ? methodMatcher.and(matcher) : methodMatcher;
    const spyWithMatcher = this.with(fullMatcher);
    verifyOnlyOneCall({ spy: spyWithMatcher, errPrefix: "postResponseBody" });
    return spyWithMatcher.firstCall.returnValue.body;
  },
  postResponseCode(this: ServiceSpy, matcher?: SinonMatcher): any {
    const methodMatcher = match({ method: "post" });
    const fullMatcher = matcher ? methodMatcher.and(matcher) : methodMatcher;
    const spyWithMatcher = this.with(fullMatcher);
    verifyOnlyOneCall({ spy: spyWithMatcher, errPrefix: "postResponseCode" });
    return spyWithMatcher.firstCall.returnValue.statusCode;
  },
  postResponseHeaders(this: ServiceSpy, matcher?: SinonMatcher): any {
    const methodMatcher = match({ method: "post" });
    const fullMatcher = matcher ? methodMatcher.and(matcher) : methodMatcher;
    const spyWithMatcher = this.with(fullMatcher);
    verifyOnlyOneCall({
      spy: spyWithMatcher,
      errPrefix: "postResponseHeaders",
    });
    return spyWithMatcher.firstCall.returnValue.headers;
  },
  getRequestHost(this: ServiceSpy, matcher?: SinonMatcher): string {
    const methodMatcher = match({ method: "get" });
    const fullMatcher = matcher ? methodMatcher.and(matcher) : methodMatcher;
    const spyWithMatcher = this.with(fullMatcher);
    verifyOnlyOneCall({ spy: spyWithMatcher, errPrefix: "getHost" });
    return spyWithMatcher.firstCall.args[0].host;
  },
  getRequestBody(this: ServiceSpy, matcher?: SinonMatcher): any {
    const methodMatcher = match({ method: "get" });
    const fullMatcher = matcher ? methodMatcher.and(matcher) : methodMatcher;
    const spyWithMatcher = this.with(fullMatcher);
    verifyOnlyOneCall({ spy: spyWithMatcher, errPrefix: "getRequestBody" });
    return spyWithMatcher.firstCall.args[0].body;
  },
  getRequestPath(this: ServiceSpy, matcher?: SinonMatcher): any {
    const methodMatcher = match({ method: "get" });
    const fullMatcher = matcher ? methodMatcher.and(matcher) : methodMatcher;
    const spyWithMatcher = this.with(fullMatcher);
    verifyOnlyOneCall({ spy: spyWithMatcher, errPrefix: "getRequestPath" });
    return spyWithMatcher.firstCall.args[0].path;
  },
  getRequestPathname(this: ServiceSpy, matcher?: SinonMatcher): any {
    const methodMatcher = match({ method: "get" });
    const fullMatcher = matcher ? methodMatcher.and(matcher) : methodMatcher;
    const spyWithMatcher = this.with(fullMatcher);
    verifyOnlyOneCall({ spy: spyWithMatcher, errPrefix: "getRequestPathname" });
    return spyWithMatcher.firstCall.args[0].pathname;
  },
  getRequestHeaders(this: ServiceSpy, matcher?: SinonMatcher): any {
    const methodMatcher = match({ method: "get" });
    const fullMatcher = matcher ? methodMatcher.and(matcher) : methodMatcher;
    const spyWithMatcher = this.with(fullMatcher);
    verifyOnlyOneCall({ spy: spyWithMatcher, errPrefix: "getRequestHeaders" });
    return spyWithMatcher.firstCall.args[0].headers;
  },
  getRequestQuery(this: ServiceSpy, matcher?: SinonMatcher): any {
    const methodMatcher = match({ method: "get" });
    const fullMatcher = matcher ? methodMatcher.and(matcher) : methodMatcher;
    const spyWithMatcher = this.with(fullMatcher);
    verifyOnlyOneCall({ spy: spyWithMatcher, errPrefix: "getRequestQuery" });
    return spyWithMatcher.firstCall.args[0].query;
  },
  getRequestProtocol(this: ServiceSpy, matcher?: SinonMatcher): any {
    const methodMatcher = match({ method: "get" });
    const fullMatcher = matcher ? methodMatcher.and(matcher) : methodMatcher;
    const spyWithMatcher = this.with(fullMatcher);
    verifyOnlyOneCall({ spy: spyWithMatcher, errPrefix: "getRequestProtocol" });
    return spyWithMatcher.firstCall.args[0].protocol;
  },
  getResponseBody(this: ServiceSpy, matcher?: SinonMatcher): any {
    const methodMatcher = match({ method: "get" });
    const fullMatcher = matcher ? methodMatcher.and(matcher) : methodMatcher;
    const spyWithMatcher = this.with(fullMatcher);
    verifyOnlyOneCall({ spy: spyWithMatcher, errPrefix: "getResponseBody" });
    return spyWithMatcher.firstCall.returnValue.body;
  },
  getResponseCode(this: ServiceSpy, matcher?: SinonMatcher): any {
    const methodMatcher = match({ method: "get" });
    const fullMatcher = matcher ? methodMatcher.and(matcher) : methodMatcher;
    const spyWithMatcher = this.with(fullMatcher);
    verifyOnlyOneCall({ spy: spyWithMatcher, errPrefix: "getResponseCode" });
    return spyWithMatcher.firstCall.returnValue.statusCode;
  },
  getResponseHeaders(this: ServiceSpy, matcher?: SinonMatcher): any {
    const methodMatcher = match({ method: "get" });
    const fullMatcher = matcher ? methodMatcher.and(matcher) : methodMatcher;
    const spyWithMatcher = this.with(fullMatcher);
    verifyOnlyOneCall({ spy: spyWithMatcher, errPrefix: "getResponseHeaders" });
    return spyWithMatcher.firstCall.returnValue.headers;
  },
  putRequestHost(this: ServiceSpy, matcher?: SinonMatcher): string {
    const methodMatcher = match({ method: "put" });
    const fullMatcher = matcher ? methodMatcher.and(matcher) : methodMatcher;
    const spyWithMatcher = this.with(fullMatcher);
    verifyOnlyOneCall({ spy: spyWithMatcher, errPrefix: "putHost" });
    return spyWithMatcher.firstCall.args[0].host;
  },
  putRequestBody(this: ServiceSpy, matcher?: SinonMatcher): any {
    const methodMatcher = match({ method: "put" });
    const fullMatcher = matcher ? methodMatcher.and(matcher) : methodMatcher;
    const spyWithMatcher = this.with(fullMatcher);
    verifyOnlyOneCall({ spy: spyWithMatcher, errPrefix: "putRequestBody" });
    return spyWithMatcher.firstCall.args[0].body;
  },
  putRequestPath(this: ServiceSpy, matcher?: SinonMatcher): any {
    const methodMatcher = match({ method: "put" });
    const fullMatcher = matcher ? methodMatcher.and(matcher) : methodMatcher;
    const spyWithMatcher = this.with(fullMatcher);
    verifyOnlyOneCall({ spy: spyWithMatcher, errPrefix: "putRequestPath" });
    return spyWithMatcher.firstCall.args[0].path;
  },
  putRequestPathname(this: ServiceSpy, matcher?: SinonMatcher): any {
    const methodMatcher = match({ method: "put" });
    const fullMatcher = matcher ? methodMatcher.and(matcher) : methodMatcher;
    const spyWithMatcher = this.with(fullMatcher);
    verifyOnlyOneCall({ spy: spyWithMatcher, errPrefix: "putRequestPathname" });
    return spyWithMatcher.firstCall.args[0].pathname;
  },
  putRequestHeaders(this: ServiceSpy, matcher?: SinonMatcher): any {
    const methodMatcher = match({ method: "put" });
    const fullMatcher = matcher ? methodMatcher.and(matcher) : methodMatcher;
    const spyWithMatcher = this.with(fullMatcher);
    verifyOnlyOneCall({ spy: spyWithMatcher, errPrefix: "putRequestHeaders" });
    return spyWithMatcher.firstCall.args[0].headers;
  },
  putRequestQuery(this: ServiceSpy, matcher?: SinonMatcher): any {
    const methodMatcher = match({ method: "put" });
    const fullMatcher = matcher ? methodMatcher.and(matcher) : methodMatcher;
    const spyWithMatcher = this.with(fullMatcher);
    verifyOnlyOneCall({ spy: spyWithMatcher, errPrefix: "putRequestQuery" });
    return spyWithMatcher.firstCall.args[0].query;
  },
  putRequestProtocol(this: ServiceSpy, matcher?: SinonMatcher): any {
    const methodMatcher = match({ method: "put" });
    const fullMatcher = matcher ? methodMatcher.and(matcher) : methodMatcher;
    const spyWithMatcher = this.with(fullMatcher);
    verifyOnlyOneCall({ spy: spyWithMatcher, errPrefix: "putRequestProtocol" });
    return spyWithMatcher.firstCall.args[0].protocol;
  },
  putResponseBody(this: ServiceSpy, matcher?: SinonMatcher): any {
    const methodMatcher = match({ method: "put" });
    const fullMatcher = matcher ? methodMatcher.and(matcher) : methodMatcher;
    const spyWithMatcher = this.with(fullMatcher);
    verifyOnlyOneCall({ spy: spyWithMatcher, errPrefix: "putResponseBody" });
    return spyWithMatcher.firstCall.returnValue.body;
  },
  putResponseCode(this: ServiceSpy, matcher?: SinonMatcher): any {
    const methodMatcher = match({ method: "put" });
    const fullMatcher = matcher ? methodMatcher.and(matcher) : methodMatcher;
    const spyWithMatcher = this.with(fullMatcher);
    verifyOnlyOneCall({ spy: spyWithMatcher, errPrefix: "putResponseCode" });
    return spyWithMatcher.firstCall.returnValue.statusCode;
  },
  putResponseHeaders(this: ServiceSpy, matcher?: SinonMatcher): any {
    const methodMatcher = match({ method: "put" });
    const fullMatcher = matcher ? methodMatcher.and(matcher) : methodMatcher;
    const spyWithMatcher = this.with(fullMatcher);
    verifyOnlyOneCall({ spy: spyWithMatcher, errPrefix: "putResponseHeaders" });
    return spyWithMatcher.firstCall.returnValue.headers;
  },
  deleteRequestHost(this: ServiceSpy, matcher?: SinonMatcher): string {
    const methodMatcher = match({ method: "delete" });
    const fullMatcher = matcher ? methodMatcher.and(matcher) : methodMatcher;
    const spyWithMatcher = this.with(fullMatcher);
    verifyOnlyOneCall({ spy: spyWithMatcher, errPrefix: "deleteHost" });
    return spyWithMatcher.firstCall.args[0].host;
  },
  deleteRequestBody(this: ServiceSpy, matcher?: SinonMatcher): any {
    const methodMatcher = match({ method: "delete" });
    const fullMatcher = matcher ? methodMatcher.and(matcher) : methodMatcher;
    const spyWithMatcher = this.with(fullMatcher);
    verifyOnlyOneCall({ spy: spyWithMatcher, errPrefix: "deleteRequestBody" });
    return spyWithMatcher.firstCall.args[0].body;
  },
  deleteRequestPath(this: ServiceSpy, matcher?: SinonMatcher): any {
    const methodMatcher = match({ method: "delete" });
    const fullMatcher = matcher ? methodMatcher.and(matcher) : methodMatcher;
    const spyWithMatcher = this.with(fullMatcher);
    verifyOnlyOneCall({ spy: spyWithMatcher, errPrefix: "deleteRequestPath" });
    return spyWithMatcher.firstCall.args[0].path;
  },
  deleteRequestPathname(this: ServiceSpy, matcher?: SinonMatcher): any {
    const methodMatcher = match({ method: "delete" });
    const fullMatcher = matcher ? methodMatcher.and(matcher) : methodMatcher;
    const spyWithMatcher = this.with(fullMatcher);
    verifyOnlyOneCall({
      spy: spyWithMatcher,
      errPrefix: "deleteRequestPathname",
    });
    return spyWithMatcher.firstCall.args[0].pathname;
  },
  deleteRequestHeaders(this: ServiceSpy, matcher?: SinonMatcher): any {
    const methodMatcher = match({ method: "delete" });
    const fullMatcher = matcher ? methodMatcher.and(matcher) : methodMatcher;
    const spyWithMatcher = this.with(fullMatcher);
    verifyOnlyOneCall({
      spy: spyWithMatcher,
      errPrefix: "deleteRequestHeaders",
    });
    return spyWithMatcher.firstCall.args[0].headers;
  },
  deleteRequestQuery(this: ServiceSpy, matcher?: SinonMatcher): any {
    const methodMatcher = match({ method: "delete" });
    const fullMatcher = matcher ? methodMatcher.and(matcher) : methodMatcher;
    const spyWithMatcher = this.with(fullMatcher);
    verifyOnlyOneCall({ spy: spyWithMatcher, errPrefix: "deleteRequestQuery" });
    return spyWithMatcher.firstCall.args[0].query;
  },
  deleteRequestProtocol(this: ServiceSpy, matcher?: SinonMatcher): any {
    const methodMatcher = match({ method: "delete" });
    const fullMatcher = matcher ? methodMatcher.and(matcher) : methodMatcher;
    const spyWithMatcher = this.with(fullMatcher);
    verifyOnlyOneCall({
      spy: spyWithMatcher,
      errPrefix: "deleteRequestProtocol",
    });
    return spyWithMatcher.firstCall.args[0].protocol;
  },
  deleteResponseBody(this: ServiceSpy, matcher?: SinonMatcher): any {
    const methodMatcher = match({ method: "delete" });
    const fullMatcher = matcher ? methodMatcher.and(matcher) : methodMatcher;
    const spyWithMatcher = this.with(fullMatcher);
    verifyOnlyOneCall({ spy: spyWithMatcher, errPrefix: "deleteResponseBody" });
    return spyWithMatcher.firstCall.returnValue.body;
  },
  deleteResponseCode(this: ServiceSpy, matcher?: SinonMatcher): any {
    const methodMatcher = match({ method: "delete" });
    const fullMatcher = matcher ? methodMatcher.and(matcher) : methodMatcher;
    const spyWithMatcher = this.with(fullMatcher);
    verifyOnlyOneCall({ spy: spyWithMatcher, errPrefix: "deleteResponseCode" });
    return spyWithMatcher.firstCall.returnValue.statusCode;
  },
  deleteResponseHeaders(this: ServiceSpy, matcher?: SinonMatcher): any {
    const methodMatcher = match({ method: "delete" });
    const fullMatcher = matcher ? methodMatcher.and(matcher) : methodMatcher;
    const spyWithMatcher = this.with(fullMatcher);
    verifyOnlyOneCall({
      spy: spyWithMatcher,
      errPrefix: "deleteResponseHeaders",
    });
    return spyWithMatcher.firstCall.returnValue.headers;
  },
};
