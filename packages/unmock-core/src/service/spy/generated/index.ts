/* This file has been autogenerated from generate-spy.ts.
 * Regenerate with "npm run generate-spy", DO NOT EDIT THIS FILE!
 */
import { match, SinonMatcher } from "sinon";
import { ServiceSpy } from "..";
import {
  HTTPMethod,
  IIncomingHeaders,
  IIncomingQuery,
  IOutgoingHeaders,
  IProtocol,
} from "../../../interfaces";
import { decorateSpy, verifyOnlyOneCall } from "../decorate";

export interface ISpyDecoration {
  with(matcher: SinonMatcher): ServiceSpy;
  withMethod(method: HTTPMethod): ServiceSpy;
  postRequestHost(matcher?: SinonMatcher): string;
  postRequestBody(matcher?: SinonMatcher): any;
  postRequestPathname(matcher?: SinonMatcher): string;
  postRequestPath(matcher?: SinonMatcher): string;
  postRequestHeaders(matcher?: SinonMatcher): IIncomingHeaders;
  postRequestQuery(matcher?: SinonMatcher): IIncomingQuery;
  postRequestProtocol(matcher?: SinonMatcher): IProtocol;

  postResponseBody(matcher?: SinonMatcher): any;
  postResponseCode(matcher?: SinonMatcher): number;
  postResponseHeaders(matcher?: SinonMatcher): IOutgoingHeaders;

  getRequestHost(matcher?: SinonMatcher): string;
  getRequestBody(matcher?: SinonMatcher): any;
  getRequestPathname(matcher?: SinonMatcher): string;
  getRequestPath(matcher?: SinonMatcher): string;
  getRequestHeaders(matcher?: SinonMatcher): IIncomingHeaders;
  getRequestQuery(matcher?: SinonMatcher): IIncomingQuery;
  getRequestProtocol(matcher?: SinonMatcher): IProtocol;

  getResponseBody(matcher?: SinonMatcher): any;
  getResponseCode(matcher?: SinonMatcher): number;
  getResponseHeaders(matcher?: SinonMatcher): IOutgoingHeaders;

  putRequestHost(matcher?: SinonMatcher): string;
  putRequestBody(matcher?: SinonMatcher): any;
  putRequestPathname(matcher?: SinonMatcher): string;
  putRequestPath(matcher?: SinonMatcher): string;
  putRequestHeaders(matcher?: SinonMatcher): IIncomingHeaders;
  putRequestQuery(matcher?: SinonMatcher): IIncomingQuery;
  putRequestProtocol(matcher?: SinonMatcher): IProtocol;

  putResponseBody(matcher?: SinonMatcher): any;
  putResponseCode(matcher?: SinonMatcher): number;
  putResponseHeaders(matcher?: SinonMatcher): IOutgoingHeaders;

  deleteRequestHost(matcher?: SinonMatcher): string;
  deleteRequestBody(matcher?: SinonMatcher): any;
  deleteRequestPathname(matcher?: SinonMatcher): string;
  deleteRequestPath(matcher?: SinonMatcher): string;
  deleteRequestHeaders(matcher?: SinonMatcher): IIncomingHeaders;
  deleteRequestQuery(matcher?: SinonMatcher): IIncomingQuery;
  deleteRequestProtocol(matcher?: SinonMatcher): IProtocol;

  deleteResponseBody(matcher?: SinonMatcher): any;
  deleteResponseCode(matcher?: SinonMatcher): number;
  deleteResponseHeaders(matcher?: SinonMatcher): IOutgoingHeaders;
}

export const decorators = {
  with(this: ServiceSpy, matcher: SinonMatcher): ServiceSpy {
    return decorateSpy(this.withArgs(matcher));
  },
  withMethod(this: ServiceSpy, method: HTTPMethod): ServiceSpy {
    return this.with(match({ method }));
  },
  postRequestHost(this: ServiceSpy, matcher?: SinonMatcher): string {
    const methodMatcher = match({ method: "post" });
    const fullMatcher = matcher ? methodMatcher.and(matcher) : methodMatcher;
    const spyWithMatcher = this.with(fullMatcher);
    verifyOnlyOneCall({ spy: spyWithMatcher, errPrefix: "postHost" });
    return spyWithMatcher.firstCall.args[0].host;
  },
  postRequestBody(this: ServiceSpy, matcher?: SinonMatcher): any {
    const methodMatcher = match({ method: "post" });
    const fullMatcher = matcher ? methodMatcher.and(matcher) : methodMatcher;
    const spyWithMatcher = this.with(fullMatcher);
    verifyOnlyOneCall({ spy: spyWithMatcher, errPrefix: "postRequestBody" });
    return spyWithMatcher.firstCall.args[0].body;
  },
  postResponseBody(this: ServiceSpy, matcher?: SinonMatcher): any {
    const methodMatcher = match({ method: "post" });
    const fullMatcher = matcher ? methodMatcher.and(matcher) : methodMatcher;
    const spyWithMatcher = this.with(fullMatcher);
    verifyOnlyOneCall({ spy: spyWithMatcher, errPrefix: "postResponseBody" });
    return spyWithMatcher.firstCall.returnValue.body;
  },
  getRequestHost(this: ServiceSpy, matcher?: SinonMatcher): string {
    const methodMatcher = match({ method: "get" });
    const fullMatcher = matcher ? methodMatcher.and(matcher) : methodMatcher;
    const spyWithMatcher = this.with(fullMatcher);
    verifyOnlyOneCall({ spy: spyWithMatcher, errPrefix: "getHost" });
    return spyWithMatcher.firstCall.args[0].host;
  },
  getRequestBody(this: ServiceSpy, matcher?: SinonMatcher): any {
    const methodMatcher = match({ method: "get" });
    const fullMatcher = matcher ? methodMatcher.and(matcher) : methodMatcher;
    const spyWithMatcher = this.with(fullMatcher);
    verifyOnlyOneCall({ spy: spyWithMatcher, errPrefix: "getRequestBody" });
    return spyWithMatcher.firstCall.args[0].body;
  },
  getResponseBody(this: ServiceSpy, matcher?: SinonMatcher): any {
    const methodMatcher = match({ method: "get" });
    const fullMatcher = matcher ? methodMatcher.and(matcher) : methodMatcher;
    const spyWithMatcher = this.with(fullMatcher);
    verifyOnlyOneCall({ spy: spyWithMatcher, errPrefix: "getResponseBody" });
    return spyWithMatcher.firstCall.returnValue.body;
  },
  putRequestHost(this: ServiceSpy, matcher?: SinonMatcher): string {
    const methodMatcher = match({ method: "put" });
    const fullMatcher = matcher ? methodMatcher.and(matcher) : methodMatcher;
    const spyWithMatcher = this.with(fullMatcher);
    verifyOnlyOneCall({ spy: spyWithMatcher, errPrefix: "putHost" });
    return spyWithMatcher.firstCall.args[0].host;
  },
  putRequestBody(this: ServiceSpy, matcher?: SinonMatcher): any {
    const methodMatcher = match({ method: "put" });
    const fullMatcher = matcher ? methodMatcher.and(matcher) : methodMatcher;
    const spyWithMatcher = this.with(fullMatcher);
    verifyOnlyOneCall({ spy: spyWithMatcher, errPrefix: "putRequestBody" });
    return spyWithMatcher.firstCall.args[0].body;
  },
  putResponseBody(this: ServiceSpy, matcher?: SinonMatcher): any {
    const methodMatcher = match({ method: "put" });
    const fullMatcher = matcher ? methodMatcher.and(matcher) : methodMatcher;
    const spyWithMatcher = this.with(fullMatcher);
    verifyOnlyOneCall({ spy: spyWithMatcher, errPrefix: "putResponseBody" });
    return spyWithMatcher.firstCall.returnValue.body;
  },
  deleteRequestHost(this: ServiceSpy, matcher?: SinonMatcher): string {
    const methodMatcher = match({ method: "delete" });
    const fullMatcher = matcher ? methodMatcher.and(matcher) : methodMatcher;
    const spyWithMatcher = this.with(fullMatcher);
    verifyOnlyOneCall({ spy: spyWithMatcher, errPrefix: "deleteHost" });
    return spyWithMatcher.firstCall.args[0].host;
  },
  deleteRequestBody(this: ServiceSpy, matcher?: SinonMatcher): any {
    const methodMatcher = match({ method: "delete" });
    const fullMatcher = matcher ? methodMatcher.and(matcher) : methodMatcher;
    const spyWithMatcher = this.with(fullMatcher);
    verifyOnlyOneCall({ spy: spyWithMatcher, errPrefix: "deleteRequestBody" });
    return spyWithMatcher.firstCall.args[0].body;
  },
  deleteResponseBody(this: ServiceSpy, matcher?: SinonMatcher): any {
    const methodMatcher = match({ method: "delete" });
    const fullMatcher = matcher ? methodMatcher.and(matcher) : methodMatcher;
    const spyWithMatcher = this.with(fullMatcher);
    verifyOnlyOneCall({ spy: spyWithMatcher, errPrefix: "deleteResponseBody" });
    return spyWithMatcher.firstCall.returnValue.body;
  },
};
